@startuml classDiagramV2

title Kanban System Class Diagram
!define RECTANGLE class

class Task {
    - id: uuid
    - title: str
    - description: str
    - startDate: date
    - endDate: date
    ' + getId(): uuid
    ' + getTitle(): str
    ' + getDescription(): str
    ' + getStartDate(): date
    ' + getEndDate(): date
    ' + setTitle(title: str): void
    ' + setDescription(description: str): void
    ' + setStartDate(startDate: date): void
    ' + setEndDate(endDate: date): void
    ' + canBeModifiedBy(user: LightUser): boolean
    ' + modifyTask(user: LightUser, newTitle: str, newDescription: str, newStartDate: date, newEndDate: date): boolean
}

class Message {
    - id: uuid
    - content: str
    - date: datetime
    '+ getId(): uuid
    '+ getContent(): str
    '+ getDate(): date
}

class Column {
    - id: uuid
    - title: str
    - color: str
    - number: int
    '+ getId(): uuid
    '+ getTitle(): str
    '+ getColor(): str
    '+ getNumber(): int
    '+ setTitle(title: str): void
    '+ setId(id: uuid): void
    '+ setColor(color: str): void
    '+ setNumber(number: int): void
    '+ canBeModifiedBy(user: LightUser): boolean
    '+ modifyColumn(user: LightUser, newTitle: str, newColor: str): boolean
}

class LightKanban {
    - title: str
    - id: uuid
    '+ getTitle(): str
    '+ getId(): uuid
    '+ setTitle(title: str): void
    '+ setId(id: uuid): void
    '+ hasModifyPermission(user: LightUser): boolean
    '+ getUserRole(user: LightUser): Role
}

class Kanban {
    - taskColumn: HashMap
    '+ getTaskColumn(): HashMap
    '+ setTaskColumn(taskColumn: HashMap): void
    '+ canBeModifiedBy(user: LightUser): boolean
    '+ modifyKanban(user: LightUser, newTitle: str): boolean
    '+ addTaskToColumn(user: LightUser, task: Task, column: Column): boolean
    '+ moveTask(user: LightUser, task: Task, fromColumn: Column, toColumn: Column): boolean
}

class SecureUser {
    - password: str encoded(hash)
    '+ getPassword(): str encoded(hash)
    '+ setPassword(password: str encoded(hash)): void
}

class User {
    - firstName: str
    - lastName: str
    - birthDate: date
    - avatar: image
    - myKanban: list<Kanban>
    '+ getFirstName(): str
    '+ getLastName(): str
    '+ getBirthDate(): date
    '+ getAvatar(): str
    '+ getMyKanban(): list<Kanban>
    '+ setFirstName(firstName: str): void
    '+ setLastName(lastName: str): void
    '+ setBirthDate(birthDate: date): void
    '+ setAvatar(avatar: str): void
    '+ setMyKanban(myKanban: list<Kanban>): void
    '+ canModifyProfile(currentUser: LightUser): boolean
    '+ modifyProfile(currentUser: LightUser, newFirstName: str, newLastName: str, newBirthDate: date): boolean
}

class LightUser {
    - id: uuid
    - username: str
    '+ getId(): uuid
    '+ getUsername(): str
    '+ setId(id: uuid): void
    '+ setUsername(username: str): void
}

enum Role {
    VIEWER
    MODIFIER
}

class Access {
    - roles: Role
    - user: LightUser
    '+ getRoles(): Role
    '+ getUser(): LightUser
    '+ setUser(user: LightUser): void
    '+ setRoles(roles: Role): void
    '+ hasPermission(permission: Role): boolean
}

class ModifyTask {
    - task: Task
    '+ getTask(): Task
    '+ setTask(task: Task): void
}

class ModifyColumn {
    - column: Column
    '+ getColumn(): Column
    '+ setColumn(column: Column): void
}

class RemoveAccess {
    - lightKanban: LightKanban
    '+ getLightKanban(): LightKanban
    '+ setLightKanban(lightKanban: LightKanban): void
}

class AddAccess {
    - lightKanban: LightKanban
    '+ getLightKanban(): LightKanban
    '+ setLightKanban(lightKanban: LightKanban): void
}

class CreateColumn {
    - newColumn: Column
    '+ getNewColumn(): Column
    '+ setNewColumn(newColumn: Column): void
}

class DeleteColumn {
    - columnId: uuid
    '+ getColumnId(): uuid
    '+ setColumnId(columnId: uuid): void
}

class ModifyKanban {
    - kanban: LightKanban
    '+ getKanban(): LightKanban
    '+ setKanban(kanban: LightKanban): void
}

class CreateTask {
    - newTask: Task
    - targetColumn: uuid
    '+ getNewTask(): Task
    '+ getTargetColumn(): uuid
    '+ setNewTask(newTask: Task): void
    '+ setTargetColumn(targetColumn: uuid): void
}

class DeleteTask {
    - taskId: uuid
    '+ getTaskId(): uuid
    '+ setTaskId(taskId: uuid): void
}

class MoveTask {
    - taskId: uuid
    - targetColumn: uuid
    '+ getTaskId(): uuid
    '+ getTargetColumn(): uuid
    '+ setTaskId(taskId: uuid): void
    '+ setTargetColumn(targetColumn: uuid): void
}

class CreateMessage {
    - message: Message
    '+ getMessage(): Message
    '+ setMessage(message: Message): void
}

class SnapshotInfo {
    - id: uuid
    - name: str
    - creationDate: datetime
    - filePath: str
    '+ getId(): uuid
    '+ getName(): String
    '+ getCreationDate(): datetime
    '+ getFilePath(): str
    '+ setId(id: uuid): void
    '+ setName(name: str): void
    '+ setCreationDate(date: datetime): void
    '+ setFilePath(path: String): void
}

class DataClient {
    - snapshotDirectory: str
    '+ getSnapshotDirectory(): String
    '+ setSnapshotDirectory(directory: str): void
    '+ saveSnapshot(kanbanData: KanbanBoard): boolean
    '+ writeSnapshotToFile(kanbanData: KanbanBoard, timestamp: datetime): boolean
    '+ listSnapshots(): List<SnapshotInfo>
    '+ scanSnapshotDirectory(directoryPath: str): List<SnapshotInfo>
    '+ getSnapshot(snapshotId: str): KanbanBoard
    '+ loadSnapshotFromFile(snapshotId: String, filePath: String): KanbanBoard
    '+ deleteSnapshot(snapshotId: String): boolean
    '+ deleteSnapshotFile(snapshotId: String, filePath: String): boolean
}

abstract Modification <<abstract>>{
    - id: uuid
    '+ getId(): uuid
    '+ setId(id: uuid): void
}

' ===== INHERITANCE RELATIONSHIPS =====

' User hierarchy
User --|> LightUser
SecureUser --|> User

' Kanban hierarchy
Kanban --|> LightKanban

' Modification hierarchy
ModifyTask --|> Modification
ModifyColumn --|> Modification
ModifyKanban --|> Modification
CreateTask --|> Modification
CreateColumn --|> Modification
DeleteTask --|> Modification
DeleteColumn --|> Modification
MoveTask --|> Modification
CreateMessage --|> Modification
AddAccess --|> Modification
RemoveAccess --|> Modification

' ===== COMPOSITION/AGGREGATION RELATIONSHIPS =====

' Kanban composition -> Task/Column/Message
Kanban *-- "*" Task
Kanban *-- "*" Column
Kanban *-- "*" Message

' ===== ASSOCIATION RELATIONSHIPS =====

' Task <-> LightUser relationships
Task "* creator" -- "1" LightUser
Task "* affected user" -- "*" LightUser

' Message <-> LightUser relationships
Message "* receiver" -- "*" LightUser
Message "* sender" -- "1" LightUser

' User/LightUser <-> Kanban/LightKanban relationships
User "1" -- "* creator" Kanban
LightUser "1" -- "* creator" Kanban
User "* joined kanban" -- "*" LightKanban
LightUser "*" -- "* access" LightKanban

' Modification classes relationships with reference classes
ModifyTask "*" -- "1" Task
ModifyColumn "*" -- "1" Column
ModifyKanban "*" -- "1" LightKanban
CreateTask "1" -- "1" Task
CreateColumn "1" -- "1" Column
CreateMessage "1" -- "1" Message
DeleteTask "1" -- "1" Task
DeleteColumn "1" -- "1" Column
MoveTask "*" -- "1" Task
AddAccess "*" -- "1" LightKanban
RemoveAccess "*" -- "1" LightKanban

' DataClient relationships
DataClient "1" -- "*" SnapshotInfo
DataClient "*" -- "1" Kanban

' ===== SPECIAL RELATIONSHIPS =====

' Association class
(LightKanban, LightUser) .. Access

@enduml