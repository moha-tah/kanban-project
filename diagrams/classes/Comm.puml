@startuml Comm

' --- DÃ©finition des classes ---
class CommCoreClient {
    +sendToServer(Message msg) : void
    +serverPort : Int
    +serverAddress : INetAddress
    +handle(Message msg) : void
    
}

class CommCoreServer {
    -clients : List <ClientHandler>
    -running : bool
    +startCommunication() : void
    +comCoreServeur(int serverPort)
    +stopCommunication() : void
}

abstract class Message {
    +handle() : void
}

abstract class CommCore {
    +handle() : void
}

class NewUserMsg {
    +newUser : LightUser
    +userKanBan : <List> LightKanban
    +handle(myCore) : void
}

class AddListModifiersMsg {
    +newUser : LightUser
    +userKanBan : <List> LightKanban
    +handle(myCore) : void
}

class DataCallsCommImp {
    -core : CommCoreClient
}

class MainsCallCommImp {
    -core : CommCoreClient
}

interface DataCallsComm {

}

interface IHMCallsComm {

}

interface CommCallsData {

}

interface KanbanCallsComm {


}

class KanbanCallsComImp {
    -core : CommCoreClient

}

class MsgSender {
    -socket : Socket
    +sendServerSocket() : void
}

class MsgReceiver {
    -core : CommCoreClient
    -serverSocket : ServerSocket
    +receiveServerSocket() : void
}

' --- Relations possibles ---
MainsCallCommImp -- CommCoreClient
DataCallsCommImp -- CommCoreClient
CommCallsData -- CommCoreClient
MsgReceiver -- CommCoreClient
MsgSender -- CommCoreClient
KanbanCallsComImp -- CommCoreClient



KanbanCallsComm <|-- KanbanCallsComImp
DataCallsComm <|-- DataCallsCommImp
IHMCallsComm <|-- MainsCallCommImp
CommCore <|-- CommCoreClient
CommCore <|-- CommCoreServer
Message <|-- AddListModifiersMsg
Message <|-- NewUserMsg


@enduml